# Production docker-compose configuration for multi-host deployment
# Uses external MongoDB and Ollama services configured in .env

services:
  # Frontend with integrated nginx (serves both static files and proxies backend)
  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-}
        GIT_COMMIT: ${GIT_COMMIT:-}
        CACHE_BUST: ${CACHE_BUST:-}
    container_name: olympian-frontend
    restart: unless-stopped
    ports:
      - "${APP_PORT:-8080}:80"
    environment:
      DEPLOYMENT_MODE: ${DEPLOYMENT_MODE:-multi-host}
      # Use Docker service name when backend is on Docker network
      BACKEND_HOST: backend
      BACKEND_PORT: 4000
    depends_on:
      - backend
    networks:
      - olympian-network
    # Resource limits for frontend
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    # Add extra_hosts for custom DNS resolution
    extra_hosts:
      - "host.docker.internal:host-gateway"

  backend:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
    container_name: olympian-backend
    restart: unless-stopped
    # Remove host networking to enable Docker service discovery
    ports:
      - "4000:4000"  # Expose backend port to host if needed
    networks:
      - olympian-network
    environment:
      # Deployment mode
      DEPLOYMENT_MODE: ${DEPLOYMENT_MODE:-multi-host}
      
      # Docker environment indicator
      RUNNING_IN_DOCKER: "true"
      
      # External services (configured in .env)
      # Use Docker service name for MongoDB when containerized
      MONGODB_URI: ${MONGODB_URI:-mongodb://mongodb:27017/olympian_ai_lite}
      OLLAMA_HOST: ${OLLAMA_HOST}
      
      # Optional: Multiple hosts for load balancing
      OLLAMA_HOSTS: ${OLLAMA_HOSTS:-}
      MCP_HOSTS: ${MCP_HOSTS:-}
      
      # Service discovery settings
      SERVICE_DISCOVERY_ENABLED: ${SERVICE_DISCOVERY_ENABLED:-true}
      SERVICE_DISCOVERY_SUBNET: ${SERVICE_DISCOVERY_SUBNET:-192.168.1.0/24}
      
      # Model capability configuration - CRITICAL for subproject 3
      MODEL_CAPABILITY_MODE: ${MODEL_CAPABILITY_MODE:-automatic}
      
      # Application settings
      NODE_ENV: production
      PORT: 4000
      LOG_LEVEL: ${LOG_LEVEL:-info}
      
      # Security
      JWT_SECRET: ${JWT_SECRET}
      SESSION_SECRET: ${SESSION_SECRET}
      
      # CORS settings
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost:8080}
      
      # Memory tuning for vision processing
      NODE_OPTIONS: "--max-old-space-size=2048"
    volumes:
      - config-data:/config/.olympian-ai-lite
      - logs:/app/logs
    depends_on:
      mongodb:
        condition: service_healthy
    # Resource limits for backend (increased for vision processing)
    deploy:
      resources:
        limits:
          memory: 3G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
    # Add extra_hosts to allow backend to access host services and custom DNS
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # MongoDB service - enabled for multi-host when using containerized option
  mongodb:
    image: mongo:7
    container_name: olympian-mongodb
    restart: unless-stopped
    # Remove port exposure as it's not needed when using Docker networking
    volumes:
      - mongodb-data:/data/db
    environment:
      MONGO_INITDB_DATABASE: olympian_ai_lite
    networks:
      - olympian-network
    # Resource limits for MongoDB
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Example MCP server (optional)
  mcp-filesystem:
    image: node:20-alpine
    container_name: olympian-mcp-filesystem
    restart: unless-stopped
    working_dir: /app
    command: npx -y @modelcontextprotocol/server-filesystem /data
    volumes:
      - mcp-data:/data
    networks:
      - olympian-network
    # Resource limits for MCP server
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000", "||", "exit", "1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 15s

volumes:
  config-data:
  logs:
  mongodb-data:
  mcp-data:

networks:
  olympian-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
