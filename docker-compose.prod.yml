# Production docker-compose configuration for multi-host deployment (SUBPROJECT 3)
# Self-reliant setup with integrated MCP servers - No external dependencies
# Uses external MongoDB and Ollama services configured in .env

# This compose file automatically generates build arguments to ensure
# source code changes always trigger a rebuild (no cache issues)

services:
  # Frontend with integrated nginx (serves both static files and proxies backend)
  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
      # These args are automatically generated by the Makefile
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +"%Y-%m-%dT%H:%M:%SZ")}
        GIT_COMMIT: ${GIT_COMMIT:-$(git rev-parse --short HEAD 2>/dev/null || echo "no-git")}
        CACHE_BUST: ${CACHE_BUST:-$(date +%s)}
    container_name: olympian-frontend
    restart: unless-stopped
    ports:
      - "${APP_PORT:-8080}:80"
    environment:
      DEPLOYMENT_MODE: ${DEPLOYMENT_MODE:-multi-host}
      # Use Docker service name when backend is on Docker network
      BACKEND_HOST: backend
      BACKEND_PORT: 4000
    depends_on:
      - backend
    networks:
      - olympian-network
    # Resource limits for frontend
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    # Add extra_hosts for custom DNS resolution
    extra_hosts:
      - "host.docker.internal:host-gateway"

  backend:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
      # Backend also gets cache busting
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +"%Y-%m-%dT%H:%M:%SZ")}
        GIT_COMMIT: ${GIT_COMMIT:-$(git rev-parse --short HEAD 2>/dev/null || echo "no-git")}
        CACHE_BUST: ${CACHE_BUST:-$(date +%s)}
    container_name: olympian-backend
    restart: unless-stopped
    ports:
      - "4000:4000"  # Expose backend port to host if needed
    networks:
      - olympian-network
    environment:
      # SUBPROJECT IDENTIFICATION - CRITICAL for stdio MCP mode
      SUBPROJECT: "3"
      
      # Deployment mode - CRITICAL for subproject 3
      DEPLOYMENT_MODE: ${DEPLOYMENT_MODE:-docker-multi-host}
      ENABLE_MULTI_HOST: ${ENABLE_MULTI_HOST:-true}
      
      # Docker environment indicator
      RUNNING_IN_DOCKER: "true"
      
      # MongoDB with replica set support for transactions
      # Use replica set URI to enable transactions in multi-host deployment
      MONGODB_URI: ${MONGODB_URI:-mongodb://mongodb:27017/olympian_ai_lite?replicaSet=rs0}
      OLLAMA_HOST: ${OLLAMA_HOST}
      
      # Optional: Multiple hosts for load balancing
      OLLAMA_HOSTS: ${OLLAMA_HOSTS:-}
      
      # Service discovery settings
      SERVICE_DISCOVERY_ENABLED: ${SERVICE_DISCOVERY_ENABLED:-true}
      SERVICE_DISCOVERY_SUBNET: ${SERVICE_DISCOVERY_SUBNET:-192.168.1.0/24}
      
      # Model capability configuration - CRITICAL for subproject 3
      MODEL_CAPABILITY_MODE: ${MODEL_CAPABILITY_MODE:-custom}
      
      # MCP Configuration - Stdio transport (servers run as child processes)
      MCP_ENABLED: ${MCP_ENABLED:-true}
      MCP_OPTIONAL: ${MCP_OPTIONAL:-true}
      MCP_TRANSPORT: stdio
      MCP_CONFIG_PATH: ${MCP_CONFIG_PATH:-/app/mcp-config.stdio.json}
      
      # MCP Server Authentication for stdio processes
      GITHUB_PERSONAL_ACCESS_TOKEN: ${GITHUB_PERSONAL_ACCESS_TOKEN:-}
      CONTEXT7_API_KEY: ${CONTEXT7_API_KEY:-}
      NASA_API_KEY: ${NASA_API_KEY:-DEMO_KEY}
      BRAVE_API_KEY: ${BRAVE_API_KEY:-}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY:-}
      GOOGLE_CSE_ID: ${GOOGLE_CSE_ID:-}
      
      # Redis Configuration - Optional for multi-host coordination
      REDIS_URL: ${REDIS_URL:-redis://redis:6379}
      REDIS_OPTIONAL: ${REDIS_OPTIONAL:-true}
      
      # Application settings
      NODE_ENV: production
      PORT: 4000
      LOG_LEVEL: ${LOG_LEVEL:-info}
      
      # Security
      JWT_SECRET: ${JWT_SECRET}
      SESSION_SECRET: ${SESSION_SECRET}
      
      # CORS settings
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost:8080}
      
      # Memory tuning for stdio MCP servers and vision processing
      NODE_OPTIONS: "--max-old-space-size=4096"
    volumes:
      - config-data:/config/.olympian-ai-lite
      - logs:/app/logs
      # Mount stdio MCP configuration for subproject 3
      - ./mcp-config.stdio.json:/app/mcp-config.stdio.json:ro
      # Alternative mount path for container-based config loading
      - ./mcp-config.stdio.json:/config/mcp-config.stdio.json:ro
    depends_on:
      mongodb-replica-init:
        condition: service_completed_successfully
    # Resource limits for backend (increased for stdio MCP servers and vision processing)
    deploy:
      resources:
        limits:
          memory: 6G
          cpus: '3.0'
        reservations:
          memory: 3G
          cpus: '1.5'
    # Add extra_hosts to allow backend to access host services and custom DNS
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # ===================================
  # CORE INFRASTRUCTURE SERVICES
  # ===================================

  # MongoDB configured as single-node replica set for transaction support
  mongodb:
    image: mongo:7
    container_name: olympian-mongodb
    restart: unless-stopped
    command: mongod --replSet rs0 --bind_ip_all --port 27017
    volumes:
      - mongodb-data:/data/db
      - mongodb-config:/data/configdb
    environment:
      MONGO_INITDB_DATABASE: olympian_ai_lite
    networks:
      - olympian-network
    # Resource limits for MongoDB
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: |
        test $$(mongosh --quiet --eval "
          try {
            db.runCommand({ping: 1}).ok
          } catch(e) {
            0
          }
        ") -eq 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Replica set initialization service
  mongodb-replica-init:
    image: mongo:7
    container_name: olympian-mongodb-replica-init
    restart: "no"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - olympian-network
    command: |
      mongosh --host mongodb:27017 --eval '
        try {
          rs.status();
          print("‚úÖ Replica set already initialized");
        } catch(e) {
          print("üîß Initializing replica set...");
          rs.initiate({
            _id: "rs0",
            members: [
              {
                _id: 0,
                host: "mongodb:27017"
              }
            ]
          });
          
          // Wait for replica set to be ready
          var attempts = 0;
          while (attempts < 30) {
            try {
              var status = rs.status();
              if (status.members[0].state === 1) {
                print("‚úÖ Replica set initialized successfully");
                print("üìä MongoDB replica set status:", JSON.stringify(status, null, 2));
                break;
              }
            } catch(e) {
              print("‚è≥ Waiting for replica set to be ready... attempt", attempts + 1);
            }
            attempts++;
            sleep(1000);
          }
          
          if (attempts >= 30) {
            print("‚ùå Failed to initialize replica set after 30 attempts");
            quit(1);
          }
        }
      '

  # Redis service for multi-host coordination (optional)
  redis:
    image: redis:7-alpine
    container_name: olympian-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - olympian-network
    # Resource limits for Redis
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

volumes:
  config-data:
  logs:
  mongodb-data:
  mongodb-config:
  redis-data:

networks:
  olympian-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
