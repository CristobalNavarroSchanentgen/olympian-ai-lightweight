# Olympian AI Lightweight Environment Configuration
# Copy this file to .env and customize for your deployment

# ===================================
# DEPLOYMENT MODE
# ===================================
# Options: 'development', 'docker-same-host', 'docker-multi-host'
DEPLOYMENT_MODE=development

# ===================================
# APPLICATION SETTINGS
# ===================================
# Server configuration
PORT=4000
NODE_ENV=development
LOG_LEVEL=info

# Frontend configuration (for Docker deployments)
APP_PORT=8080

# Client URL (for CORS in development)
CLIENT_URL=http://localhost:3000

# ===================================
# DATABASE CONFIGURATION
# ===================================
# Development: Local MongoDB (standalone)
MONGODB_URI=mongodb://localhost:27017/olympian_ai_lite

# Docker same-host: Uses container name (standalone)
# MONGODB_URI=mongodb://olympian-mongodb:27017/olympian_ai_lite

# Docker multi-host: REPLICA SET ENABLED (required for transactions/artifacts)
# The multi-host deployment automatically configures MongoDB as a single-node replica set
# to support transactions. This is essential for artifact functionality.
#
# Option 1: Use containerized MongoDB with replica set (recommended)
# MONGODB_URI=mongodb://mongodb:27017/olympian_ai_lite?replicaSet=rs0
#
# Option 2: External MongoDB with replica set
# MONGODB_URI=mongodb://username:password@192.168.1.10:27017/olympian_ai_lite?replicaSet=rs0&authSource=admin
#
# Option 3: External MongoDB cluster
# MONGODB_URI=mongodb://username:password@mongodb1.example.com:27017,mongodb2.example.com:27017/olympian_ai_lite?replicaSet=production&authSource=admin

# ===================================
# OLLAMA CONFIGURATION
# ===================================
# Development: Local Ollama
OLLAMA_HOST=http://localhost:11434

# Docker same-host: Uses container name
# OLLAMA_HOST=http://olympian-ollama:11434

# Docker multi-host: External Ollama (ALWAYS include port :11434)
# OLLAMA_HOST=http://192.168.1.11:11434
# OLLAMA_HOST=http://ollama.example.com:11434

# Multiple Ollama instances for load balancing (comma-separated)
# OLLAMA_HOSTS=192.168.1.11:11434,192.168.1.12:11434,192.168.1.13:11434

# Load balancing strategy: round-robin, least-conn, ip-hash
OLLAMA_LOAD_BALANCER=round-robin

# ===================================
# MODEL CAPABILITY CONFIGURATION
# ===================================
# Model capability detection mode: 'automatic' or 'custom'
# - automatic: Auto-detect model capabilities by testing models (slower, more accurate)
# - custom: Use predefined model capabilities (faster, requires manual configuration)
MODEL_CAPABILITY_MODE=automatic

# ===================================
# MULTI-HOST COORDINATION (Subproject 3)
# ===================================
# Enable multi-host features (requires Redis for full functionality)
ENABLE_MULTI_HOST=false

# Redis configuration for multi-host coordination
# REDIS_URL=redis://redis:6379
# REDIS_URL=redis://username:password@redis-host:6379

# Make Redis optional - server will start without Redis but with limited multi-host features
REDIS_OPTIONAL=true

# ===================================
# MCP (Model Context Protocol) CONFIGURATION
# ===================================
# Enable/disable MCP services entirely
MCP_ENABLED=true

# Make MCP optional - server will start even if MCP services fail
MCP_OPTIONAL=true

# MCP server discovery
MCP_DISCOVERY_ENABLED=true

# Known MCP servers (comma-separated) - for multi-host deployments
# MCP_HOSTS=192.168.1.20:8080,192.168.1.21:8080

# Environment variables for MCP servers
# GitHub MCP server
# GITHUB_PERSONAL_ACCESS_TOKEN=your_github_token_here

# NASA MCP server
# NASA_API_KEY=your_nasa_api_key_here

# ===================================
# SERVICE DISCOVERY (Multi-host only)
# ===================================
# Enable service discovery
SERVICE_DISCOVERY_ENABLED=true

# Network subnet to scan for services
SERVICE_DISCOVERY_SUBNET=192.168.1.0/24

# Discovery interval in milliseconds (5 minutes)
SERVICE_DISCOVERY_INTERVAL=300000

# ===================================
# SECURITY
# ===================================
# IMPORTANT: Generate secure keys for production:
# openssl rand -base64 32

JWT_SECRET=your-jwt-secret-key-here-replace-in-production
SESSION_SECRET=your-session-secret-key-here-replace-in-production

# CORS settings (comma-separated origins)
ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8080

# ===================================
# DOCKER DNS RESOLUTION (Multi-host only)
# ===================================
# Add custom host entries for DNS resolution inside Docker containers
# Format: - "hostname:ip" (note the leading dash and space)
# Example:
# EXTRA_HOSTS=- "ollama.prd.ihmn.fr:192.168.1.100"
#   - "mongodb.prd.ihmn.fr:192.168.1.101"
#   - "mcp1.local:192.168.1.110"
#   - "mcp2.local:192.168.1.111"
#
# For single host:
# EXTRA_HOSTS=- "ollama.prd.ihmn.fr:192.168.1.100"

# ===================================
# DEVELOPMENT ONLY
# ===================================
# Enable additional debugging in development
DEBUG=olympian:*

# Hot reload settings
CHOKIDAR_USEPOLLING=false

# ===================================
# DOCKER CONFIGURATION EXAMPLES
# ===================================
# Uncomment and modify based on your deployment mode:

# For Docker same-host deployment (subprojects 1 & 2):
# DEPLOYMENT_MODE=docker-same-host
# MONGODB_URI=mongodb://olympian-mongodb:27017/olympian_ai_lite
# OLLAMA_HOST=http://olympian-ollama:11434
# MCP_ENABLED=true
# MCP_OPTIONAL=true

# For Docker multi-host deployment (subproject 3):
# DEPLOYMENT_MODE=docker-multi-host
# ENABLE_MULTI_HOST=true
# 
# Using containerized MongoDB with replica set (recommended):
# MONGODB_URI=mongodb://mongodb:27017/olympian_ai_lite?replicaSet=rs0
# 
# OR using external MongoDB:
# MONGODB_URI=mongodb://username:password@your-mongo-host:27017/olympian_ai_lite?replicaSet=rs0&authSource=admin
# 
# Ollama configuration:
# OLLAMA_HOST=http://your-ollama-host:11434
# 
# Redis for multi-host coordination:
# REDIS_URL=redis://redis:6379
# REDIS_OPTIONAL=true
#
# MCP Configuration:
# MCP_ENABLED=true
# MCP_OPTIONAL=true
# GITHUB_PERSONAL_ACCESS_TOKEN=your_github_token_here
# NASA_API_KEY=your_nasa_api_key_here
# 
# Additional services:
# MCP_HOSTS=your-mcp-host-1:8080,your-mcp-host-2:8080
# EXTRA_HOSTS=- "your-ollama-host:192.168.1.100"
# MODEL_CAPABILITY_MODE=custom

# ===================================
# SERVICE RELIABILITY CONFIGURATION
# ===================================
# 
# The following settings control how the server handles optional service failures:
#
# Core Services (Required - server won't start if these fail):
# - MongoDB database connection
# - Ollama health check and model access
# - Artifact collection initialization
# - Progressive model loading
#
# Optional Services (Server will start even if these fail):
# - Redis coordination (REDIS_OPTIONAL=true)
# - MCP tool integration (MCP_OPTIONAL=true)
# - Multi-host monitoring features
#
# This separation ensures that model access is never blocked by external service failures.

# ===================================
# IMPORTANT NOTES FOR SUBPROJECT 3
# ===================================
# 
# üî• CRITICAL: Multi-host deployment requires MongoDB replica set for transactions
# 
# Why replica sets are required:
# - Artifact creation uses atomic transactions across multiple collections
# - Ensures consistency between conversations and their artifacts
# - Prevents data corruption when navigating to previous conversations
# - MongoDB standalone does not support transactions
# 
# The docker-compose.prod.yml automatically configures a single-node replica set.
# If using external MongoDB, ensure it's configured as a replica set.
#
# Quick replica set setup for external MongoDB:
# 1. Start MongoDB with: mongod --replSet rs0
# 2. Initialize: rs.initiate()
# 3. Verify: rs.status()
#
# üõ†Ô∏è SEPARATION OF CONCERNS:
#
# This configuration supports the new separation of concerns where:
# - Core AI model functionality NEVER depends on MCP or Redis
# - MCP failures will not prevent model access
# - Redis failures will not prevent single-instance operation
# - Optional services enhance functionality but are not required
#
# Service startup order:
# 1. Core services (Database, Ollama, Models) - MUST succeed
# 2. Multi-host coordination (Redis) - Optional, falls back gracefully
# 3. MCP tool integration - Optional, falls back gracefully
# 4. WebSocket and API services - Depend on core services only
