{
  "mcpServers": {
    "github": {
      "url": "http://mcp-github:3001/mcp",
      "type": "server",
      "auth": "Bearer ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
      "headers": {
        "Content-Type": "application/json",
        "User-Agent": "Olympian-AI-MCP-Client/1.0",
        "Accept": "application/json, text/event-stream",
        "MCP-Protocol-Version": "2024-11-05"
      },
      "timeout": 30000,
      "retries": 3
    },
    "nasa-mcp": {
      "url": "http://mcp-nasa:3002/mcp",
      "type": "server",
      "headers": {
        "Content-Type": "application/json",
        "User-Agent": "Olympian-AI-MCP-Client/1.0",
        "Accept": "application/json, text/event-stream",
        "MCP-Protocol-Version": "2024-11-05"
      },
      "timeout": 30000,
      "retries": 3
    },
    "met-museum": {
      "url": "http://mcp-metmuseum:3003/mcp",
      "type": "server",
      "headers": {
        "Content-Type": "application/json",
        "User-Agent": "Olympian-AI-MCP-Client/1.0",
        "Accept": "application/json, text/event-stream",
        "MCP-Protocol-Version": "2024-11-05"
      },
      "timeout": 30000,
      "retries": 3
    },
    "Context7": {
      "url": "http://mcp-context7:3004/mcp",
      "type": "server",
      "headers": {
        "Content-Type": "application/json",
        "User-Agent": "Olympian-AI-MCP-Client/1.0",
        "Accept": "application/json, text/event-stream",
        "MCP-Protocol-Version": "2024-11-05"
      },
      "timeout": 30000,
      "retries": 3
    },
    "applescript-mcp": {
      "url": "http://mcp-applescript:3005/mcp",
      "type": "server",
      "headers": {
        "Content-Type": "application/json",
        "User-Agent": "Olympian-AI-MCP-Client/1.0",
        "Accept": "application/json, text/event-stream",
        "MCP-Protocol-Version": "2024-11-05"
      },
      "timeout": 30000,
      "retries": 3
    },
    "web-search": {
      "url": "http://mcp-websearch:3006/mcp",
      "type": "server",
      "headers": {
        "Content-Type": "application/json",
        "User-Agent": "Olympian-AI-MCP-Client/1.0",
        "Accept": "application/json, text/event-stream",
        "MCP-Protocol-Version": "2024-11-05"
      },
      "timeout": 45000,
      "retries": 3
    }
  },
  "wellKnownPaths": [
    "/.well-known/mcp",
    "/.well-known/model-context-protocol"
  ],
  "registryUrls": [
    "https://registry.modelcontextprotocol.io"
  ],
  "cacheTtl": 300000,
  "_meta": {
    "version": "3.2.0",
    "deployment": "multi-host-self-reliant",
    "transport_protocol": "http_container_only",
    "description": "Self-reliant MCP configuration for subproject 3 - All MCP servers run as containers, format compatible with MCPConfigParser",
    "schema_compliance": "JSON-RPC 2.0 over HTTP",
    "format_updated": "Updated to match MCPConfigParser expected format (url instead of endpoint, type instead of transport)",
    "notes": [
      "All servers use HTTP transport exclusively with container endpoints",
      "Self-contained deployment - no external MCP server dependencies",
      "Uses Docker service names for inter-container communication",
      "All servers are marked as 'server' type for MCPConfigParser compatibility",
      "Includes retry logic and timeouts for robust container deployment",
      "Headers include proper MCP protocol version and content negotiation",
      "HTTP endpoints expect standard JSON-RPC 2.0 over HTTP protocol",
      "Supports both single JSON responses and SSE streaming",
      "Personal tokens should be replaced with actual tokens from .env file",
      "Container-based endpoints provide better resource isolation and scaling",
      "Format now compatible with MCPConfigParser validation schemas"
    ],
    "requirements": {
      "docker": true,
      "external_mcp_servers": false,
      "node": ">=18",
      "network_access": "docker_bridge_network",
      "transport": "http_container_only",
      "stdio_support": false,
      "self_reliant": true,
      "mcpConfigParser_compatible": true
    },
    "container_server_configuration": {
      "github": {
        "container_name": "mcp-github",
        "internal_port": 3001,
        "endpoint_path": "/mcp",
        "env_required": ["GITHUB_PERSONAL_ACCESS_TOKEN"],
        "personal_token_example": "ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
        "npm_package": "@modelcontextprotocol/server-github@latest"
      },
      "nasa-mcp": {
        "container_name": "mcp-nasa",
        "internal_port": 3002,
        "endpoint_path": "/mcp",
        "env_optional": ["NASA_API_KEY"],
        "demo_key_available": true,
        "npm_package": "@programcomputer/nasa-mcp-server@latest"
      },
      "met-museum": {
        "container_name": "mcp-metmuseum",
        "internal_port": 3003,
        "endpoint_path": "/mcp",
        "env_required": [],
        "npm_package": "metmuseum-mcp@latest"
      },
      "Context7": {
        "container_name": "mcp-context7",
        "internal_port": 3004,
        "endpoint_path": "/mcp",
        "env_required": [],
        "npm_package": "@upstash/context7-mcp@latest"
      },
      "applescript-mcp": {
        "container_name": "mcp-applescript",
        "internal_port": 3005,
        "endpoint_path": "/mcp",
        "env_required": [],
        "npm_package": "@sampullman/applescript-mcp@latest"
      },
      "web-search": {
        "container_name": "mcp-websearch",
        "internal_port": 3006,
        "endpoint_path": "/mcp",
        "env_optional": ["BRAVE_API_KEY"],
        "npm_package": "@modelcontextprotocol/server-brave-search@latest"
      }
    },
    "environment_variables": {
      "DEPLOYMENT_MODE": "multi-host",
      "ENABLE_MULTI_HOST": "true",
      "MCP_HTTP_ONLY": "true",
      "NODE_ENV": "production",
      "GITHUB_PERSONAL_ACCESS_TOKEN": "replace_with_actual_token",
      "NASA_API_KEY": "replace_with_actual_key_if_needed",
      "BRAVE_API_KEY": "replace_with_actual_key_if_needed"
    },
    "troubleshooting": {
      "configuration_format": "Ensure config uses 'url' and 'type' properties as expected by MCPConfigParser",
      "connection_timeout": "Ensure MCP server containers are running and healthy",
      "container_resolution": "Verify Docker bridge network connectivity between containers",
      "port_conflicts": "Check for port conflicts within Docker network (3001-3006)",
      "http_errors": "Check container logs for HTTP-specific errors (400, 404, 405, 500, etc.)",
      "transport_validation": "Ensure all servers are configured for HTTP transport, not stdio",
      "token_authentication": "Verify personal tokens are valid and properly passed to containers",
      "json_rpc_compliance": "Ensure server responses follow JSON-RPC 2.0 specification",
      "container_health": "Use docker compose ps and docker compose logs to diagnose container issues",
      "stdio_rejection": "stdio transport is completely disabled in container mode"
    }
  }
}