# Olympian AI Lightweight Environment Configuration
# Copy this file to .env and customize for your deployment

# ===================================
# DEPLOYMENT MODE
# ===================================
# Options: 'development', 'docker-same-host', 'docker-multi-host'
DEPLOYMENT_MODE=docker-multi-host

# ===================================
# APPLICATION SETTINGS
# ===================================
# Server configuration
PORT=4000
NODE_ENV=production
LOG_LEVEL=info

# Frontend configuration (for Docker deployments)
APP_PORT=8080

# Client URL (for CORS in development)
CLIENT_URL=http://localhost:3000

# ===================================
# DATABASE CONFIGURATION
# ===================================
# Development: Local MongoDB (standalone)
MONGODB_URI=mongodb://mongodb:27017/olympian_ai_lite?replicaSet=rs0

# Docker same-host: Uses container name (standalone)
# MONGODB_URI=mongodb://olympian-mongodb:27017/olympian_ai_lite

# Docker multi-host: REPLICA SET ENABLED (required for transactions/artifacts)
# The multi-host deployment automatically configures MongoDB as a single-node replica set
# to support transactions. This is essential for artifact functionality.
#
# Option 1: Use containerized MongoDB with replica set (recommended)
# MONGODB_URI=mongodb://mongodb:27017/olympian_ai_lite?replicaSet=rs0
#
# Option 2: External MongoDB with replica set
# MONGODB_URI=mongodb://username:password@192.168.1.10:27017/olympian_ai_lite?replicaSet=rs0&authSource=admin
#
# Option 3: External MongoDB cluster
# MONGODB_URI=mongodb://username:password@mongodb1.example.com:27017,mongodb2.example.com:27017/olympian_ai_lite?replicaSet=production&authSource=admin

# ===================================
# OLLAMA CONFIGURATION
# ===================================
# Development: Local Ollama
OLLAMA_HOST=http://ollama.prd.ihmn.fr

# Docker same-host: Uses container name
# OLLAMA_HOST=http://olympian-ollama:11434

# Docker multi-host: External Ollama (ALWAYS include port :11434)
# OLLAMA_HOST=http://192.168.1.11:11434
# OLLAMA_HOST=http://ollama.example.com:11434

# Multiple Ollama instances for load balancing (comma-separated)
# OLLAMA_HOSTS=192.168.1.11:11434,192.168.1.12:11434,192.168.1.13:11434

# Load balancing strategy: round-robin, least-conn, ip-hash
OLLAMA_LOAD_BALANCER=round-robin

# ===================================
# MODEL CAPABILITY CONFIGURATION
# ===================================
# Model capability detection mode: 'automatic' or 'custom'
# - automatic: Auto-detect model capabilities by testing models (slower, more accurate)
# - custom: Use predefined model capabilities (faster, requires manual configuration)
MODEL_CAPABILITY_MODE=custom

# ===================================
# MULTI-HOST COORDINATION (Subproject 3)
# ===================================
# Enable multi-host features (requires Redis for full functionality)
ENABLE_MULTI_HOST=true

# Redis configuration for multi-host coordination
REDIS_URL=redis://redis:6379
REDIS_URL=redis://redis:6379

# Make Redis optional - server will start without Redis but with limited multi-host features
REDIS_OPTIONAL=true

# ===================================
# MCP (Model Context Protocol) CONFIGURATION
# ===================================
# Enable/disable MCP services entirely
MCP_ENABLED=true

# Make MCP optional - server will start even if MCP services fail
MCP_OPTIONAL=true

# MCP transport type (stdio, sse, http)
MCP_TRANSPORT=http

# MCP configuration path
MCP_CONFIG_PATH=/app/mcp-config.multihost.json

# MCP server discovery
MCP_DISCOVERY_ENABLED=true

# Known MCP servers (comma-separated) - for multi-host deployments
# MCP_HOSTS=192.168.1.20:8080,192.168.1.21:8080

# ===================================
# MCP SERVER AUTHENTICATION
# ===================================
# GitHub MCP server
# Required for GitHub repository access, issue management, and pull requests
# Get token from: https://github.com/settings/tokens
# Required scopes: repo, read:user, read:org

# Optional - if not provided, will use DEMO_KEY with limited functionality

# Brave Search MCP server
# Optional - enhances web search capabilities
# Get key from: https://brave.com/search/api/
# BRAVE_API_KEY=your_brave_api_key_here

# ===================================
# MCP SERVER ENDPOINTS
# ===================================
# Configure these based on your deployment mode

# Development/External: Host-based endpoints
# MCP_GITHUB_ENDPOINT=http://host.docker.internal:3001/sse
# MCP_CONTEXT7_ENDPOINT=http://host.docker.internal:3004/sse

# Multi-host Self-Reliant: Container endpoints (Subproject 3)
# MCP_GITHUB_ENDPOINT=http://mcp-github:3001/mcp
# MCP_CONTEXT7_ENDPOINT=http://mcp-context7:3004/mcp
# MCP_APPLESCRIPT_ENDPOINT=http://mcp-applescript:3005/mcp

# ===================================
# SERVICE DISCOVERY (Multi-host only)
# ===================================
# Enable service discovery
SERVICE_DISCOVERY_ENABLED=true

# Network subnet to scan for services
SERVICE_DISCOVERY_SUBNET=192.168.1.0/24

# Discovery interval in milliseconds (5 minutes)
SERVICE_DISCOVERY_INTERVAL=300000

# ===================================
# SECURITY
# ===================================
# IMPORTANT: Generate secure keys for production:
# openssl rand -base64 32

JWT_SECRET=JhBeBMG+hYr6wBSZqMRPqDyRDaqa4YuqfKrAnOs0J+4=
SESSION_SECRET=xACmMmq2rIyQby/2cbQAtxp4FZJlXkmfpFqauY2RXE8=

# CORS settings (comma-separated origins)
ALLOWED_ORIGINS=http://localhost:8080,http://localhost:5173

# ===================================
# DOCKER DNS RESOLUTION (Multi-host only)
# ===================================
# Add custom host entries for DNS resolution inside Docker containers
# Format: - "hostname:ip" (note the leading dash and space)
# Example:
# EXTRA_HOSTS=- "ollama.prd.ihmn.fr:192.168.1.100"
#   - "mongodb.prd.ihmn.fr:192.168.1.101"
#   - "mcp1.local:192.168.1.110"
#   - "mcp2.local:192.168.1.111"
#
# For single host:
# EXTRA_HOSTS=- "ollama.prd.ihmn.fr:192.168.1.100"

# ===================================
# DEVELOPMENT ONLY
# ===================================
# Enable additional debugging in development
DEBUG=olympian:*

# Hot reload settings
CHOKIDAR_USEPOLLING=false

# ===================================
# DOCKER CONFIGURATION EXAMPLES
# ===================================
# Uncomment and modify based on your deployment mode:

# For Docker same-host deployment (subprojects 1 & 2):
# DEPLOYMENT_MODE=docker-same-host
# MONGODB_URI=mongodb://olympian-mongodb:27017/olympian_ai_lite
# OLLAMA_HOST=http://olympian-ollama:11434
# MCP_ENABLED=true
# MCP_OPTIONAL=true

# For Docker multi-host deployment (subproject 3):
# DEPLOYMENT_MODE=docker-multi-host
# ENABLE_MULTI_HOST=true
# 
# Using containerized MongoDB with replica set (recommended):
# MONGODB_URI=mongodb://mongodb:27017/olympian_ai_lite?replicaSet=rs0
# 
# OR using external MongoDB:
# MONGODB_URI=mongodb://username:password@your-mongo-host:27017/olympian_ai_lite?replicaSet=rs0&authSource=admin
# 
# Ollama configuration:
# OLLAMA_HOST=http://your-ollama-host:11434
# 
# Redis for multi-host coordination:
REDIS_URL=redis://redis:6379
# REDIS_OPTIONAL=true
#
# MCP Configuration - Self-Reliant Container Mode (Subproject 3):
# MCP_ENABLED=true
# MCP_OPTIONAL=true
# MCP_TRANSPORT=http
# BRAVE_API_KEY=your_brave_api_key_here
# MCP_GITHUB_ENDPOINT=http://mcp-github:3001/mcp
# MCP_CONTEXT7_ENDPOINT=http://mcp-context7:3004/mcp
# MCP_APPLESCRIPT_ENDPOINT=http://mcp-applescript:3005/mcp
# 
# Additional services:
# MCP_HOSTS=your-mcp-host-1:8080,your-mcp-host-2:8080
# EXTRA_HOSTS=- "your-ollama-host:192.168.1.100"
# MODEL_CAPABILITY_MODE=custom

# ===================================
# SERVICE RELIABILITY CONFIGURATION
# ===================================
# 
# The following settings control how the server handles optional service failures:
#
# Core Services (Required - server won't start if these fail):
# - MongoDB database connection
# - Ollama health check and model access
# - Artifact collection initialization
# - Progressive model loading
#
# Optional Services (Server will start even if these fail):
# - Redis coordination (REDIS_OPTIONAL=true)
# - MCP tool integration (MCP_OPTIONAL=true)
# - Multi-host monitoring features
#
# This separation ensures that model access is never blocked by external service failures.

# ===================================
# IMPORTANT NOTES FOR SUBPROJECT 3
# ===================================
# 
# üî• CRITICAL: Multi-host deployment requires MongoDB replica set for transactions
# 
# Why replica sets are required:
# - Artifact creation uses atomic transactions across multiple collections
# - Ensures consistency between conversations and their artifacts
# - Prevents data corruption when navigating to previous conversations
# - MongoDB standalone does not support transactions
# 
# The docker-compose.prod.yml automatically configures a single-node replica set.
# If using external MongoDB, ensure it's configured as a replica set.
#
# Quick replica set setup for external MongoDB:
# 1. Start MongoDB with: mongod --replSet rs0
# 2. Initialize: rs.initiate()
# 3. Verify: rs.status()
#
# üõ†Ô∏è SELF-RELIANT MCP SERVERS (SUBPROJECT 3):
#
# Subproject 3 now includes integrated MCP servers that run as containers:
# - No external MCP server dependencies required
# - Better resource isolation and scaling
# - Simplified deployment and management
# - Automatic container health checks
# - Easy horizontal scaling of individual services
#
# MCP Server Containers:
# 1. mcp-github: Repository access, issues, PRs (requires GitHub token)
# 4. mcp-context7: Documentation and code assistance (no auth required)
# 5. mcp-applescript: macOS automation (no auth required)
#
# üõ†Ô∏è SEPARATION OF CONCERNS:
#
# This configuration supports the new separation of concerns where:
# - Core AI model functionality NEVER depends on MCP or Redis
# - MCP failures will not prevent model access
# - Redis failures will not prevent single-instance operation
# - Optional services enhance functionality but are not required
#
# Service startup order:
# 1. Core services (Database, Ollama, Models) - MUST succeed
# 2. Multi-host coordination (Redis) - Optional, falls back gracefully
# 3. MCP tool integration - Optional, falls back gracefully
# 4. WebSocket and API services - Depend on core services only

# ===================================
# SUBPROJECT 3 SETUP INSTRUCTIONS
# ===================================
# 
# For the easiest setup of subproject 3 with token configuration:
# 
# 1. Run the enhanced setup script:
#    bash scripts/setup-multihost.sh
# 
# 2. The script will prompt for:
#    - GitHub Personal Access Token
#    - Brave Search API Key
#    - Ollama host configuration
#    - MongoDB configuration
# 
# 3. Start the deployment:
#    make quick-docker-multi
# 
# 4. Access the application:
#    http://localhost:8080 (or your configured APP_PORT)
#
# The setup script automatically configures all container endpoints
# and generates secure secrets for production deployment.

# ===================================
# MCP SERVER STARTUP COMMANDS (Reference - NOT NEEDED for Subproject 3)
# ===================================
# For running MCP servers on your host machine, use these commands:
# NOTE: Subproject 3 runs all MCP servers as containers - these are for reference only
#
# GitHub MCP Server (Port 3001):
# npx -y @modelcontextprotocol/server-github --transport http --port 3001
# Environment: GITHUB_PERSONAL_ACCESS_TOKEN=your_token_here
#
#
# Met Museum MCP Server (Port 3003):
#
# Context7 MCP Server (Port 3004):
# npx -y @upstash/context7-mcp --transport http --port 3004
#
# AppleScript MCP Server (Port 3005):
# npx -y @sampullman/applescript-mcp --transport http --port 3005
#
# Web Search MCP Server (Port 3006):
# npx -y @modelcontextprotocol/server-brave-search --transport http --port 3006
# Environment: BRAVE_API_KEY=your_key_here (optional)

# Context7 MCP Server (Upstash Redis)

# HIL Settings
HIL_ENABLED=true
HIL_TIMEOUT_MS=30000

# Compatible Models (no detection needed)
COMPATIBLE_MODELS=qwen2.5,qwen3,llama3.1,llama3.2,mistral,deepseek-r1

# MCP Server Environment Variables


# MCP Server Environment Variables (Only 3 servers: GitHub, AppleScript, Context7)
# GITHUB_PERSONAL_ACCESS_TOKEN=your_github_token_here
UPSTASH_REDIS_REST_URL=your_upstash_url_here
UPSTASH_REDIS_REST_TOKEN=your_upstash_token_here
# BRAVE_API_KEY=your_brave_api_key_here
# GITHUB_PERSONAL_ACCESS_TOKEN=your_github_token_here
# BRAVE_API_KEY=your_brave_api_key_here
# GITHUB_PERSONAL_ACCESS_TOKEN=your_github_token_here
# BRAVE_API_KEY=your_brave_api_key_here
# GITHUB_PERSONAL_ACCESS_TOKEN=your_github_token_here
# GITHUB_PERSONAL_ACCESS_TOKEN=your_github_token_here
# GITHUB_PERSONAL_ACCESS_TOKEN=your_github_token_here
# GITHUB_PERSONAL_ACCESS_TOKEN=your_github_token_here
# GITHUB_PERSONAL_ACCESS_TOKEN=your_github_token_here
# GITHUB_PERSONAL_ACCESS_TOKEN=your_github_token_here
# GITHUB_PERSONAL_ACCESS_TOKEN=your_github_token_here
# GITHUB_PERSONAL_ACCESS_TOKEN=your_github_token_here
# GITHUB_PERSONAL_ACCESS_TOKEN=your_github_token_here
# GITHUB_PERSONAL_ACCESS_TOKEN=your_github_token_here
# GITHUB_PERSONAL_ACCESS_TOKEN=your_github_token_here
