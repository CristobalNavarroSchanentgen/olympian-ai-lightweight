================================================================================
OLYMPIAN AI - MCP ARCHITECTURE TRANSITION GUIDE (UPDATED)
================================================================================

Date: August 2025
Version: 2.0
Status: Phase 1 In Progress
Purpose: Transition to streamlined MCP architecture with namespace-based tool
         routing and HIL protection for multi-host deployment (Subproject 3)

================================================================================
CURRENT STATE (as of latest commit)
================================================================================

COMPLETED:
----------
✅ Deleted legacy components:
   - MCPStreamliner.ts (replaced by EnhancedOllamaStreamliner)
   - CustomModelCapabilityService.ts (using COMPATIBLE_MODELS list instead)
   - ToolEnabledOllamaStreamliner.ts (consolidated into Enhanced version)
   - mcp-config.multihost.json (using stdio config only)

✅ Created new components:
   - StreamlinerFactory.ts - Factory pattern for model-based streamliner selection
   - packages/server/src/services/mcp/index.ts - Consolidated MCP exports
   - EnhancedOllamaStreamliner.ts - Tool-enabled streaming
   - ToolNamespaceManager.ts - Namespace qualification for tools
   - HILManager.ts - Human-in-the-loop approval system
   - ToolSelectionService.ts - Tool enable/disable management

✅ Partially updated:
   - OllamaStreamliner.ts - Stubbed capability detection
   - chat.ts - Uses StreamlinerFactory pattern

COMPLETED IN THIS SESSION:
------------
✅ Fixed all TypeScript compilation errors (51 → 0)
✅ Added customModelCapabilityService stub
✅ Fixed ModelCapability type usage throughout
✅ Added MCPServerStatus type to shared types
✅ Fixed MCPTool interface with serverId
✅ Added initialize() and streamChat() to EnhancedOllamaStreamliner
✅ Fixed MCPManager methods (callTool, removeServer, getStatus)
✅ Updated ChatRequest interface with additional properties
✅ Fixed all import and type issues
✅ Build successful!

================================================================================PART 1: NEW ARCHITECTURE (FINAL)
================================================================================

CORE SERVICES:
--------------
1. MCPManager - Manages 3 MCP servers (GitHub, AppleScript, Context7)
2. ToolNamespaceManager - Prevents conflicts via qualified naming
3. EnhancedOllamaStreamliner - Handles tool-enabled models
4. HILManager - 30-second timeout approval for tool execution
5. ToolSelectionService - User control over tool availability
6. StreamlinerFactory - Routes to correct streamliner based on model

DATA FLOW:
----------
1. Client request → WebSocket → Chat endpoint
2. StreamlinerFactory.getStreamliner(model) creates appropriate handler
3. Tool-enabled models → EnhancedOllamaStreamliner
4. Non-tool models → OllamaStreamliner (legacy support)
5. Tool calls → HIL approval → MCPManager execution
6. Results streamed back to client

KEY PRINCIPLES:
---------------
- NO capability detection (use COMPATIBLE_MODELS list)
- Namespace qualification for all tools (serverId.toolName)
- HIL safety-first approach (default rejection after timeout)
- Single MCP config file (mcp-config.stdio.json)
- All MCP servers run via npx (no containers)

================================================================================
PART 2: IMMEDIATE FIXES NEEDED
================================================================================

CRITICAL (Build Blockers):
---------------------------
1. Add customModelCapabilityService stub to:
   - packages/server/src/api/health.ts
   - packages/server/src/services/ModelProgressiveLoader.ts
   - packages/server/src/services/OllamaHealthCheck.ts

2. Fix ModelCapability type definition:
   - Add missing properties: name, reasoning, maxTokens, contextWindow
   - Or simplify to only { vision: boolean; tools: boolean }

3. Align streamliner interfaces:
   - Both OllamaStreamliner and EnhancedOllamaStreamliner need:
     * initialize(): Promise<void>
     * processRequest(request: ChatRequest): Promise<ProcessedRequest>
     * streamChat(request, onToken, onComplete): Promise<void>

4. Fix MCPManager missing methods:
   - Add callTool() method
   - Add removeServer() method
   - Fix getStatus() return type

5. Fix EnhancedOllamaStreamliner ChatRequest type:
   - Add optional properties: temperature, top_p, seed, num_ctx, messages, prompt
   - Or use existing ChatRequest interface

================================================================================
PART 3: PHASE 2 - UI INTEGRATION (Next)
================================================================================

After TypeScript builds successfully:

1. Integrate HILConfirmationModal:
   - Add to main chat UI
   - Connect WebSocket events
   - Test approval/rejection flow

2. Add ToolSelectionPanel:
   - Create UI component
   - Wire to ToolSelectionService
   - Add to settings or sidebar

3. Test end-to-end:
   - Non-tool model chat
   - Tool-enabled model chat
   - Tool execution with HIL
   - Tool selection changes

================================================================================
PART 4: CONFIGURATION
================================================================================

ENVIRONMENT VARIABLES (.env):
------------------------------
# MCP Configuration
MCP_ENABLED=true
MCP_TRANSPORT=stdio
GITHUB_PERSONAL_ACCESS_TOKEN=xxx

# HIL Settings  
HIL_ENABLED=true
HIL_TIMEOUT_MS=30000

# Model Compatibility
COMPATIBLE_MODELS=qwen2.5,qwen3,llama3.1,llama3.2,mistral,deepseek-r1

# REMOVE THESE (if still present):
# MODEL_CAPABILITY_MODE=xxx
# CAPABILITY_DETECTION_ENABLED=xxx
# MCP_CONFIG_PATH=xxx

DOCKER COMPOSE:
---------------
Use only:
- docker-compose.multihost.yml (base)
- docker-compose.mcp.yml (MCP override if needed)

Delete if present:
- docker-compose.same-host.yml
- docker-compose.same-host-existing-ollama.yml

================================================================================
PART 5: TESTING CHECKLIST
================================================================================

When build succeeds, verify:

[ ] TypeScript compiles without errors
[ ] Server starts successfully
[ ] Non-tool models work (qwen, llama without tools)
[ ] Tool-enabled models work (qwen2.5, etc)
[ ] MCP servers initialize (check logs)
[ ] WebSocket connections establish
[ ] Basic chat functionality works

After UI integration:

[ ] HIL modal appears for tool calls
[ ] Tool selection UI updates properly
[ ] Tool execution completes successfully
[ ] Namespace qualification working
[ ] No duplicate tool names

================================================================================
PART 6: QUICK REFERENCE COMMANDS
================================================================================

# Build and test
npm run build
npm run build:server

# Check for remaining issues
grep -r "customModelCapabilityService" packages/server/src --include="*.ts"
grep -r "MCPStreamliner" packages/server/src --include="*.ts"
grep -r "detectCapabilities" packages/server/src --include="*.ts"

# Start services (after successful build)
make quick-docker-multi

# Monitor logs
docker-compose -f docker-compose.multihost.yml logs -f backend

# Git commands for tracking progress
git add -A && git commit -m "Phase X: Description"
git status
git diff --cached

================================================================================
NOTES FOR NEXT SESSION
================================================================================

Priority order:
1. Fix TypeScript compilation errors (51 remaining)
2. Test basic chat functionality
3. Implement UI components for HIL and Tool Selection
4. Full integration testing
5. Documentation update

Key files to focus on:
- health.ts, ModelProgressiveLoader.ts, OllamaHealthCheck.ts (need stubs)
- MCPManager.ts (missing methods)
- Type definitions in shared package

Remember: This is for Subproject 3 (multi-host) ONLY. 
Other subprojects should not be affected.

================================================================================
