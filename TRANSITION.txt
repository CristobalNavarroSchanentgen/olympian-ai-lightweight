================================================================================
OLYMPIAN AI - UI INTEGRATION FOR MCP ARCHITECTURE
================================================================================

Date: August 2025
Version: 3.0
Status: Backend Complete, UI Integration Pending
Purpose: Integrate UI components for the new MCP architecture with namespace-based 
         tool routing and HIL protection for multi-host deployment (Subproject 3)

================================================================================
BACKEND STATUS (COMPLETED)
================================================================================

✅ TypeScript compilation successful (0 errors)
✅ MCP architecture implemented:
   - MCPManager with 3 servers (GitHub, AppleScript, Context7)
   - ToolNamespaceManager for qualified naming
   - EnhancedOllamaStreamliner for tool-enabled models
   - HILManager with 30-second timeout
   - ToolSelectionService for user control
   - StreamlinerFactory for model-based routing

================================================================================
UI COMPONENTS REQUIRED
================================================================================

1. HIL CONFIRMATION MODAL
-------------------------
Location: packages/client/src/components/HILConfirmationModal.tsx

Requirements:
- Display tool call details (name, description, parameters)
- 30-second countdown timer
- Approve/Reject buttons
- Auto-reject on timeout
- Namespace display (e.g., "github.create_issue")

WebSocket Events:
- Listen: 'hil:request' - Incoming tool approval request
- Emit: 'hil:approve' - User approves tool execution
- Emit: 'hil:reject' - User rejects tool execution

UI Design:
- Modal overlay with backdrop
- Clear tool information display
- Prominent timer display
- Color-coded approve (green) / reject (red) buttons
- Tool namespace badge

2. TOOL SELECTION PANEL
------------------------
Location: packages/client/src/components/ToolSelectionPanel.tsx

Requirements:
- List all available MCP tools grouped by server
- Toggle switches for individual tools
- Server-level enable/disable
- Search/filter functionality
- Real-time status indicators

WebSocket Events:
- Listen: 'tools:list' - Available tools from server
- Emit: 'tools:enable' - Enable specific tool
- Emit: 'tools:disable' - Disable specific tool
- Emit: 'tools:server:toggle' - Toggle entire server

UI Design:
- Collapsible server sections
- Tool cards with descriptions
- Status badges (enabled/disabled/pending)
- Search bar with live filtering
- Bulk actions toolbar

3. MCP STATUS INDICATOR
-----------------------
Location: packages/client/src/components/MCPStatusIndicator.tsx

Requirements:
- Show MCP servers connection status
- Display total available tools count
- Indicate HIL protection status
- Real-time updates

WebSocket Events:
- Listen: 'mcp:status' - Server status updates
- Listen: 'mcp:error' - Connection errors

UI Design:
- Compact status bar component
- Server icons with status dots
- Tool count badge
- HIL shield icon (active/inactive)

4. TOOL EXECUTION FEEDBACK
---------------------------
Location: packages/client/src/components/ToolExecutionFeedback.tsx

Requirements:
- Show tool execution progress
- Display results/errors
- Maintain execution history
- Namespace-qualified display

WebSocket Events:
- Listen: 'tool:executing' - Tool execution started
- Listen: 'tool:result' - Tool execution completed
- Listen: 'tool:error' - Tool execution failed

UI Design:
- Toast notifications for quick feedback
- Execution log panel (collapsible)
- Success/error color coding
- Copy result functionality

================================================================================
INTEGRATION POINTS
================================================================================

1. Chat Component Updates
-------------------------
File: packages/client/src/components/Chat.tsx

Required Changes:
- Import HILConfirmationModal
- Add state for HIL requests
- Handle HIL WebSocket events
- Render modal when HIL request active

2. Settings Component Updates
-----------------------------
File: packages/client/src/components/Settings.tsx

Required Changes:
- Import ToolSelectionPanel
- Add MCP tools tab
- Integrate tool management UI
- Persist tool preferences

3. Main Layout Updates
----------------------
File: packages/client/src/components/Layout.tsx

Required Changes:
- Import MCPStatusIndicator
- Add status bar to header/footer
- Import ToolExecutionFeedback
- Add feedback container

================================================================================
WEBSOCKET PROTOCOL
================================================================================

Client → Server:
----------------
{
  type: 'hil:approve',
  payload: { requestId: string }
}

{
  type: 'hil:reject',
  payload: { requestId: string }
}

{
  type: 'tools:enable',
  payload: { toolId: string }
}

{
  type: 'tools:disable',
  payload: { toolId: string }
}

Server → Client:
----------------
{
  type: 'hil:request',
  payload: {
    requestId: string,
    tool: {
      serverId: string,
      name: string,
      description: string,
      arguments: any
    },
    timeout: number
  }
}

{
  type: 'tools:list',
  payload: {
    servers: [{
      id: string,
      name: string,
      status: string,
      tools: [{
        id: string,
        name: string,
        description: string,
        enabled: boolean
      }]
    }]
  }
}

================================================================================
STYLING REQUIREMENTS
================================================================================

Use Tailwind CSS classes consistently:
- Dark mode support (dark:* variants)
- Responsive design (sm:, md:, lg: breakpoints)
- Consistent spacing and typography
- Smooth transitions and animations
- Accessibility (ARIA labels, keyboard navigation)

Color Scheme:
- Success: green-500/600
- Error: red-500/600
- Warning: yellow-500/600
- Info: blue-500/600
- HIL: purple-500/600
- MCP: indigo-500/600

================================================================================
STATE MANAGEMENT
================================================================================

React Context/Hooks:
- useHIL() - HIL request management
- useTools() - Tool selection state
- useMCPStatus() - MCP connection status
- useToolExecution() - Execution history

Local Storage Keys:
- 'mcp-tools-enabled' - User tool selections
- 'hil-auto-approve' - HIL auto-approval settings (if implemented)
- 'tool-execution-history' - Recent executions

================================================================================
PRIORITY ORDER
================================================================================

1. HILConfirmationModal - CRITICAL for safety
2. MCPStatusIndicator - User awareness of system state  
3. ToolSelectionPanel - User control over tools
4. ToolExecutionFeedback - User feedback on actions
5. Integration with existing components

================================================================================
FILE STRUCTURE
================================================================================

packages/client/src/
├── components/
│   ├── mcp/
│   │   ├── HILConfirmationModal.tsx
│   │   ├── ToolSelectionPanel.tsx
│   │   ├── MCPStatusIndicator.tsx
│   │   └── ToolExecutionFeedback.tsx
│   └── ...existing components
├── hooks/
│   ├── useHIL.ts
│   ├── useTools.ts
│   ├── useMCPStatus.ts
│   └── useToolExecution.ts
├── contexts/
│   └── MCPContext.tsx
└── types/
    └── mcp.ts

================================================================================
NOTES
================================================================================

- All UI components must handle loading and error states
- WebSocket reconnection logic should be transparent to user
- Tool namespaces must be clearly displayed (serverId.toolName)
- HIL timeout must be visually prominent
- Consider adding sound/vibration for HIL requests (optional)
- Ensure mobile responsiveness for all components

================================================================================
